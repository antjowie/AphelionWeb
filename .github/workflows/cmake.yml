name: CMake

on:
  push:
    branches: [ master, feature/* ]
  pull_request:
    branches: [ master, feature/* ]
  workflow_dispatch:

#env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  #BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
       #platforms: [windows-latest, ubuntu-latest]
       platforms: [windows-latest]
       archetypes: [Debug, Release]
       linkage: [BUILD_SHARED_LIBS=ON, BUILD_SHARED_LIBS=OFF]

    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.platforms }}

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{ matrix.archetypes }} -D${{ matrix.linkage }}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C =${{ matrix.archetypes }}
